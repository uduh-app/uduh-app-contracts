{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ECDSAInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "ECDSAInvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "ECDSAInvalidSignatureS",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "allowance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "ERC20InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "ERC20InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC20InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC20InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC20InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "ERC20InvalidSpender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "ERC2612ExpiredSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC2612InvalidSigner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					}
				],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientProjectFeeAmount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "currentNonce",
						"type": "uint256"
					}
				],
				"name": "InvalidAccountNonce",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidGasLimit",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidKeyHash",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "initiator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "expectedInitiator",
						"type": "address"
					}
				],
				"name": "InvalidRefundInitiator",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidRequestConfirmations",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidShortString",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "bits",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SafeCastOverflowedUintDowncast",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "str",
						"type": "string"
					}
				],
				"name": "StringTooLong",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					}
				],
				"name": "SubmissionAlreadyProcessed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					}
				],
				"name": "SubmissionBeingProcessed",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "submissionsPerEpoch",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "maxRewardTokensPerEth",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "projectFee",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "houseEdgeFixed",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "houseEdgeRate",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "transferGasLimit",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "redemptionEpochForwardOffset",
						"type": "uint8"
					}
				],
				"name": "ConfigurationChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "CreditClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "CreditIssued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EIP712DomainChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "requestConfirmations",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "callbackGasLimit",
						"type": "uint32"
					}
				],
				"name": "OracleConfigurationChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "actor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountFromActor",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountFromTreasury",
						"type": "uint256"
					}
				],
				"name": "OracleDepositMade",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "subscriptionRefundAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "refundedTo",
						"type": "address"
					}
				],
				"name": "OracleSubscriptionCanclled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					}
				],
				"name": "OracleSubscriptionCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "wager",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "prepaidProjectFee",
						"type": "uint96"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "multiplier",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "multiplierBoostTokens",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "bet",
						"type": "uint32"
					},
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "status",
						"type": "uint32"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "roll",
								"type": "uint32"
							},
							{
								"internalType": "uint96",
								"name": "payoutCoins",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "payoutTokens",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "refundCoins",
								"type": "uint96"
							}
						],
						"indexed": false,
						"internalType": "struct IUDICE.SubmissionOutcome",
						"name": "outcome",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "rewardPool",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "playerTokenBalance",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "totalTokenSupply",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct IUDICE.SubmissionEventState",
						"name": "state",
						"type": "tuple"
					}
				],
				"name": "Outcome",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64[]",
						"name": "submissionIds",
						"type": "uint64[]"
					},
					{
						"indexed": false,
						"internalType": "uint32[]",
						"name": "submissionStatuses",
						"type": "uint32[]"
					}
				],
				"name": "OwnerRequestedRefunds",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "projectFee",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "prepaidProjectFee",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "onTheHouseProjectFee",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokensInLieuOfOnTheHouseProjectFee",
						"type": "uint256"
					}
				],
				"name": "ProjectFeeCharged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "burntTokens",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokensValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "withdrawTax",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "payoutCoins",
						"type": "uint256"
					}
				],
				"name": "Redeemed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "randomWord",
						"type": "uint256"
					}
				],
				"name": "SubmissionRandomReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "SubmissionRandomRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "wager",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "prepaidProjectFee",
						"type": "uint96"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "multiplier",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "multiplierBoostTokens",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "bet",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "status",
						"type": "uint32"
					},
					{
						"components": [
							{
								"internalType": "uint96",
								"name": "projectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "houseEdgeFixed",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "houseEdgeRate",
								"type": "uint64"
							}
						],
						"indexed": false,
						"internalType": "struct IUDICE.SubmissionEventConfig",
						"name": "config",
						"type": "tuple"
					}
				],
				"name": "Submitted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAddress",
						"type": "address"
					}
				],
				"name": "TreasuryCoinsWithdrawAddressChange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "coins",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokens",
						"type": "uint256"
					}
				],
				"name": "TreasuryWithdrawn",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "burnFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "refundTo",
						"type": "address"
					}
				],
				"name": "cancelSubscription",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimCredit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "createSubscription",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eip712Domain",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "fields",
						"type": "bytes1"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "verifyingContract",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[]",
						"name": "extensions",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getConfiguration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "submissionsPerEpoch",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxRewardTokensPerEth",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "projectFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "houseEdgeFixed",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "houseEdgeRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "transferGasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "redemptionEpochForwardOffset",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOracleConfiguration",
				"outputs": [
					{
						"internalType": "address",
						"name": "vrfCoordinator",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint16",
						"name": "requestConfirmations",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "callbackGasLimit",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "getPlayerInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "credit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "submissionsCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getState",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "submissionsCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pendingPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "treasuryPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "creditPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "treasuryTokens",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalSupply",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					}
				],
				"name": "getSubmission",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint96",
								"name": "wager",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "projectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "blockNumber",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "prepaidProjectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "multiplier",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "houseEdgeRate",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "multiplierBoostTokens",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "houseEdgeFixed",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "submissionId",
								"type": "uint64"
							},
							{
								"internalType": "address payable",
								"name": "player",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "bet",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "status",
								"type": "uint32"
							},
							{
								"components": [
									{
										"internalType": "uint32",
										"name": "roll",
										"type": "uint32"
									},
									{
										"internalType": "uint96",
										"name": "payoutCoins",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "payoutTokens",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "refundCoins",
										"type": "uint96"
									}
								],
								"internalType": "struct IUDICE.SubmissionOutcome",
								"name": "outcome",
								"type": "tuple"
							}
						],
						"internalType": "struct IUDICE.Submission",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "makeOracleDeposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "makeOracleDepositFromTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ownerMakeOracleDepositFromTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					}
				],
				"name": "ownerRequestRandom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "multiplier",
						"type": "uint96"
					}
				],
				"name": "play",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "multiplier",
						"type": "uint96"
					},
					{
						"internalType": "uint96",
						"name": "prepaidProjectFee",
						"type": "uint96"
					}
				],
				"name": "playWithFee",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "multiplier",
						"type": "uint96"
					}
				],
				"name": "playWithOracleDeposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "offset",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "limit",
						"type": "uint64"
					},
					{
						"internalType": "bool",
						"name": "ascend",
						"type": "bool"
					}
				],
				"name": "queryMySubmissions",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint96",
								"name": "wager",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "projectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "blockNumber",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "prepaidProjectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "multiplier",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "houseEdgeRate",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "multiplierBoostTokens",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "houseEdgeFixed",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "submissionId",
								"type": "uint64"
							},
							{
								"internalType": "address payable",
								"name": "player",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "bet",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "status",
								"type": "uint32"
							},
							{
								"components": [
									{
										"internalType": "uint32",
										"name": "roll",
										"type": "uint32"
									},
									{
										"internalType": "uint96",
										"name": "payoutCoins",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "payoutTokens",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "refundCoins",
										"type": "uint96"
									}
								],
								"internalType": "struct IUDICE.SubmissionOutcome",
								"name": "outcome",
								"type": "tuple"
							}
						],
						"internalType": "struct IUDICE.Submission[]",
						"name": "items",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "offset",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "limit",
						"type": "uint64"
					},
					{
						"internalType": "bool",
						"name": "ascend",
						"type": "bool"
					}
				],
				"name": "queryPlayerSubmissions",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint96",
								"name": "wager",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "projectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "blockNumber",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "prepaidProjectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "multiplier",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "houseEdgeRate",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "multiplierBoostTokens",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "houseEdgeFixed",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "submissionId",
								"type": "uint64"
							},
							{
								"internalType": "address payable",
								"name": "player",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "bet",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "status",
								"type": "uint32"
							},
							{
								"components": [
									{
										"internalType": "uint32",
										"name": "roll",
										"type": "uint32"
									},
									{
										"internalType": "uint96",
										"name": "payoutCoins",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "payoutTokens",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "refundCoins",
										"type": "uint96"
									}
								],
								"internalType": "struct IUDICE.SubmissionOutcome",
								"name": "outcome",
								"type": "tuple"
							}
						],
						"internalType": "struct IUDICE.Submission[]",
						"name": "items",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "offset",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "limit",
						"type": "uint64"
					},
					{
						"internalType": "bool",
						"name": "ascend",
						"type": "bool"
					}
				],
				"name": "querySubmissions",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint96",
								"name": "wager",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "projectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "blockNumber",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "prepaidProjectFee",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "multiplier",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "houseEdgeRate",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "multiplierBoostTokens",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "houseEdgeFixed",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "submissionId",
								"type": "uint64"
							},
							{
								"internalType": "address payable",
								"name": "player",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "bet",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "status",
								"type": "uint32"
							},
							{
								"components": [
									{
										"internalType": "uint32",
										"name": "roll",
										"type": "uint32"
									},
									{
										"internalType": "uint96",
										"name": "payoutCoins",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "payoutTokens",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "refundCoins",
										"type": "uint96"
									}
								],
								"internalType": "struct IUDICE.SubmissionOutcome",
								"name": "outcome",
								"type": "tuple"
							}
						],
						"internalType": "struct IUDICE.Submission[]",
						"name": "items",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokens",
						"type": "uint256"
					}
				],
				"name": "redeem",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					}
				],
				"name": "refund",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "projectFee",
						"type": "uint96"
					},
					{
						"internalType": "uint96",
						"name": "houseEdgeFixed",
						"type": "uint96"
					},
					{
						"internalType": "uint64",
						"name": "houseEdgeRate",
						"type": "uint64"
					},
					{
						"internalType": "uint32",
						"name": "transferGasLimit",
						"type": "uint32"
					},
					{
						"internalType": "uint8",
						"name": "redemptionEpochForwardOffset",
						"type": "uint8"
					}
				],
				"name": "setConfiguration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint16",
						"name": "requestConfirmations",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "callbackGasLimit",
						"type": "uint32"
					}
				],
				"name": "setOracleConfiguration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "updateTrasuryCoinsWithdrawAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "submissionId",
						"type": "uint64"
					}
				],
				"name": "userRequestRandom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "amount",
						"type": "uint96"
					}
				],
				"name": "withdrawTreasuryCoins",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTreasuryTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"ECDSAInvalidSignature()": [
					{
						"details": "The signature derives the `address(0)`."
					}
				],
				"ECDSAInvalidSignatureLength(uint256)": [
					{
						"details": "The signature has an invalid length."
					}
				],
				"ECDSAInvalidSignatureS(bytes32)": [
					{
						"details": "The signature has an S value that is in the upper half order."
					}
				],
				"ERC20InsufficientAllowance(address,uint256,uint256)": [
					{
						"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
						"params": {
							"allowance": "Amount of tokens a `spender` is allowed to operate with.",
							"needed": "Minimum amount required to perform a transfer.",
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC20InsufficientBalance(address,uint256,uint256)": [
					{
						"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
						"params": {
							"balance": "Current balance for the interacting account.",
							"needed": "Minimum amount required to perform a transfer.",
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC20InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSpender(address)": [
					{
						"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
						"params": {
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC2612ExpiredSignature(uint256)": [
					{
						"details": "Permit deadline has expired."
					}
				],
				"ERC2612InvalidSigner(address,address)": [
					{
						"details": "Mismatched signature."
					}
				],
				"InvalidAccountNonce(address,uint256)": [
					{
						"details": "The nonce used for an `account` is not the expected current nonce."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"SafeCastOverflowedUintDowncast(uint8,uint256)": [
					{
						"details": "Value doesn't fit in an uint of `bits` size."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"EIP712DomainChanged()": {
					"details": "MAY be emitted to signal that the domain could have changed."
				},
				"Submitted(address,uint96,uint96,uint64,uint96,uint96,uint32,uint32,(uint96,uint96,uint64))": {
					"details": "Emitted when a player's wager has been received "
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"burn(uint256)": {
					"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
				},
				"burnFrom(address,uint256)": {
					"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"eip712Domain()": {
					"details": "See {IERC-5267}."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/UDICE_BNB.sol": "UDICE_BNB"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 8000
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@binance-oracle/binance-oracle-starter/contracts/interfaces/VRFCoordinatorInterface.sol": {
			"keccak256": "0xa2aa7613402b2b07bd5f0e02b641dcc4ff56475f4f9e4e19e28abb02341c121c",
			"license": "MIT",
			"urls": [
				"bzz-raw://388f85706b2bf30b191554a2da4bbc53b380cbd5e466778ca271328e55b8acf8",
				"dweb:/ipfs/QmT2HsUzgaSKbMCydGXcb7mbv4sf8CjdxwmRj62wH9jc9q"
			]
		},
		"@binance-oracle/binance-oracle-starter/contracts/mock/VRFConsumerBase.sol": {
			"keccak256": "0x3cbdabb68c4e4b5440e6da73bb2f367568c3a84e464ddf7ac3a9af9d744dbd17",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ef437545325efd619fe38b5c3f250ddc46b25173be8dfae8614115a0389990d",
				"dweb:/ipfs/QmZEKztV3CCseor1QSqNUvPyH7X6bDERdDueJpAxPmEV36"
			]
		},
		"@openzeppelin/contracts@5.0.2/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts@5.0.2/governance/utils/IVotes.sol": {
			"keccak256": "0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947",
			"license": "MIT",
			"urls": [
				"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856",
				"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2"
			]
		},
		"@openzeppelin/contracts@5.0.2/governance/utils/Votes.sol": {
			"keccak256": "0xb8f69828d41b3594afd7a8c6393565901c205d8b5baf5bd2e42dbac637172979",
			"license": "MIT",
			"urls": [
				"bzz-raw://c790253821191ac46b2050d87df820d4209871f90c616381e2c2c00ff3eaac34",
				"dweb:/ipfs/QmcPETTyuZBzDRL39JNXj3SBMdx3Y9o4fPQLSZ27py5Jim"
			]
		},
		"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol": {
			"keccak256": "0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a",
				"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"
			]
		},
		"@openzeppelin/contracts@5.0.2/interfaces/IERC5805.sol": {
			"keccak256": "0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818",
			"license": "MIT",
			"urls": [
				"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a",
				"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2"
			]
		},
		"@openzeppelin/contracts@5.0.2/interfaces/IERC6372.sol": {
			"keccak256": "0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33",
			"license": "MIT",
			"urls": [
				"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb",
				"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn"
			]
		},
		"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
				"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol": {
			"keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
				"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol": {
			"keccak256": "0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073",
			"license": "MIT",
			"urls": [
				"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26",
				"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Pausable.sol": {
			"keccak256": "0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a8e54b0924a1acd92806a843998568d6bec01798c550bc440a85cfcd9cfba99",
				"dweb:/ipfs/QmZ26Y3ibYPbCRVB65NAQrGBF1UKDEu2fB8CHHMhYbBqmV"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol": {
			"keccak256": "0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee",
			"license": "MIT",
			"urls": [
				"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2",
				"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Votes.sol": {
			"keccak256": "0x2a650f6e593cfe5ff2e514a17ea7f593ee70cefa1888066bc983a6308acff4b1",
			"license": "MIT",
			"urls": [
				"bzz-raw://9a3477b9665a4b6d19f86bf2cfbfa8c08ba41193f15e68c0d75c0cab7e1fc753",
				"dweb:/ipfs/QmbcurrTatN1PBmkCWdrED8zhAqx5ah9Qp6uR8YwkKWA8V"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Nonces.sol": {
			"keccak256": "0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f",
			"license": "MIT",
			"urls": [
				"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e",
				"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Pausable.sol": {
			"keccak256": "0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc",
				"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol": {
			"keccak256": "0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6",
			"license": "MIT",
			"urls": [
				"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c",
				"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol": {
			"keccak256": "0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418",
			"license": "MIT",
			"urls": [
				"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c",
				"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
				"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol": {
			"keccak256": "0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0",
			"license": "MIT",
			"urls": [
				"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21",
				"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol": {
			"keccak256": "0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435",
			"license": "MIT",
			"urls": [
				"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c",
				"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/math/SafeCast.sol": {
			"keccak256": "0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe",
			"license": "MIT",
			"urls": [
				"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c",
				"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/structs/Checkpoints.sol": {
			"keccak256": "0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad",
			"license": "MIT",
			"urls": [
				"bzz-raw://a36cca6b22fff3db16fc789ff6c60eea71d4b156065d4d0c83a0bc5e91a77a8b",
				"dweb:/ipfs/QmYN3exd5AemxjBrN8XMB1p5LbbE16uC3sjbYjwi8AjcGR"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/types/Time.sol": {
			"keccak256": "0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58",
			"license": "MIT",
			"urls": [
				"bzz-raw://7f09bf94d5274334ec021f61a04659db303f31e60460e14b709c9bf187740111",
				"dweb:/ipfs/QmNvgomZYUwFAt4cZbPWAiTeSZQreGehY9BK5xyVJsUttb"
			]
		},
		"contracts/IUDICE.sol": {
			"keccak256": "0x1a6f01cbf05cc7bda0e3edf155d4fc7e9d3833b5e433b2c4b0d8ce2e387daec4",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a1c437b18eef9911fe3425b70446103b333dded85165e86ab3faa3083f92832",
				"dweb:/ipfs/QmVvbhEYa1wZJB9wLUXQrDDDgoWJX1tzcv66eapZDSRbpi"
			]
		},
		"contracts/UDICE.sol": {
			"keccak256": "0x3339de1fc7298d83d6a77e461a9b452c8e3a0c4484c96f567b8e56a62db5d96b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87e0d154a8236bdf90b6faed8ea4af307cc1011dcb260f95e11b0524fd5e0010",
				"dweb:/ipfs/QmS3V7yqoe5A3tKYVQqBNECrdwpQcvw734UZ9tRW1dwwaf"
			]
		},
		"contracts/UDICE_BNB.sol": {
			"keccak256": "0x3da8f682254740047a0488c817ae4114162d8c4a629987384f46198b88b5b896",
			"license": "MIT",
			"urls": [
				"bzz-raw://e695591d14cbd607e4281a57c097c977ae9cbd49b02044cdcdfd40589fc047f2",
				"dweb:/ipfs/QmNy3cV61pPJu3qGjeYpSMmnDceCwDVpKYKTMoV8kg9V5S"
			]
		},
		"contracts/UDICE_ERC20.sol": {
			"keccak256": "0xdca43fe74fcc823e203dfc3a36588948e5cac681715563820fa0bfa7227e0394",
			"license": "MIT",
			"urls": [
				"bzz-raw://d48645a7d87c46d0a7a83f199c2dd14d925fbf8b6f5b8db22828a56d9cebd6cb",
				"dweb:/ipfs/QmaVQjuXXTW3rNy5SPvP2y9Qk1QsMEa2KixdPnFHEGTrEm"
			]
		},
		"contracts/UDICE_VRFConsumer.sol": {
			"keccak256": "0xe986d3a385ad7a50e848147efd5a137fe64aeee518dc39d955be70705f16544b",
			"license": "MIT",
			"urls": [
				"bzz-raw://cd9490ee09b54951c6ff53755e4fc7ae76d65f484418afb3c19fc37c2a577be0",
				"dweb:/ipfs/QmQH2EjGyim5EksxjkPMJvogo9yyHkjbrf8MbcBJrbCb4M"
			]
		}
	},
	"version": 1
}